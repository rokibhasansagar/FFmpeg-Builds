name: Build FFmpeg

on:
  push:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      doRelease:
        description: 'Publish new release'
        type: boolean
        default: false
        required: false
      buildOnly:
        description: 'Only build ffmpeg'
        type: boolean
        default: false
        required: false
  schedule:
    # Runs at 01:00 UTC on roughly every 5th day of every month
    - cron: '0 1 1,6,11,16,21,26 1-12 ?'

env:
  DOCKER_BUILDKIT: 1

jobs:
  build_base:
    name: Build base image
    if: ${{ github.event.inputs.buildOnly != 'true' }}
    strategy:
      fail-fast: false
      matrix:
        runner: [ubuntu-latest,ubuntu-24.04-arm]
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Image Name
        id: imagename
        run: |
          IMG="${GITHUB_REPOSITORY,,}/base"
          echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
      - name: Stop Commands
        run: T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
      - name: Build target base image
        uses: docker/build-push-action@v6
        with:
          context: images/base
          pull: true
          push: true
          provenance: false
          tags: ${{ steps.imagename.outputs.name }}:latest${{ (contains(matrix.runner, 'arm') && '-arm') || '' }}
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache${{ (contains(matrix.runner, 'arm') && '-arm') || '' }}
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache${{ (contains(matrix.runner, 'arm') && '-arm') || '' }}
      - name: Get download cache key
        if: ${{ !cancelled() && !contains(matrix.runner, 'arm') }}
        id: dl_cache
        run: |
          echo "dltagname=$(./util/get_dl_cache_tag.sh)" >> $GITHUB_OUTPUT
      - name: Cache
        if: ${{ !cancelled() && !contains(matrix.runner, 'arm') }}
        uses: actions/cache@v4
        with:
          path: .cache/downloads
          key: download-cache-${{ steps.dl_cache.outputs.dltagname }}
          restore-keys: |
            download-cache-
      - name: Update Cache
        if: ${{ !cancelled() && !contains(matrix.runner, 'arm') }}
        run: |
          set -e
          ./download.sh
          ./util/clean_cache.sh
          tar czf .cache/cache.tar.gz .cache/downloads/*
      - name: Upload cache artifact
        if: ${{ !cancelled() && !contains(matrix.runner, 'arm') }}
        uses: actions/upload-artifact@v4
        with:
          name: download-cache
          overwrite: true
          path: .cache/cache.tar.gz
      - name: Cleanup
        continue-on-error: true
        uses: BtbN/delete-untagged-ghcr-action@main
        with:
          token: ${{ github.token }}
          package_name: ${{ steps.imagename.outputs.rawname }}
          repository_owner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          owner_type: user
          untagged_only: true
  build_target_bases:
    name: Build target base image
    if: ${{ github.event.inputs.buildOnly != 'true' }}
    needs: build_base
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win64,winarm64,linux64,linuxarm64]
    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Image Name
        id: imagename
        run: |
          IMG="${GITHUB_REPOSITORY,,}/base-${{ matrix.target }}"
          echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "gh_repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
      - name: Stop Commands
        run: T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
      - name: Build target base image
        uses: docker/build-push-action@v6
        with:
          context: images/base-${{ matrix.target }}
          pull: true
          push: true
          provenance: false
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
          build-args: |
            GH_REPO=ghcr.io/${{ steps.imagename.outputs.gh_repo }}
      - name: Cleanup
        continue-on-error: true
        uses: BtbN/delete-untagged-ghcr-action@main
        with:
          token: ${{ github.token }}
          package_name: ${{ steps.imagename.outputs.rawname }}
          repository_owner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          owner_type: user
          untagged_only: true
  build_targets:
    name: Build target-variant image
    if: ${{ github.event.inputs.buildOnly != 'true' }}
    needs: build_target_bases
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win64,winarm64,linux64,linuxarm64]
        variant: [gpl,nonfree,gpl 5.1,gpl 6.1,gpl 7.1,nonfree 5.1,nonfree 6.1,nonfree 7.1,gpl-shared,nonfree-shared,gpl-shared 5.1,gpl-shared 6.1,gpl-shared 7.1,nonfree-shared 5.1,nonfree-shared 6.1,nonfree-shared 7.1]
    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Image Name
        id: imagename
        run: |
          IMG="${GITHUB_REPOSITORY,,}/${{ matrix.target }}-${{ matrix.variant }}"
          echo "name=ghcr.io/${IMG/ /-}" >> $GITHUB_OUTPUT
          echo "rawname=${IMG/ /-}" >> $GITHUB_OUTPUT
      - name: Get download cache key
        id: dl_cache
        run: |
          echo "dltagname=$(./util/get_dl_cache_tag.sh)" >> $GITHUB_OUTPUT
      - name: Stop Commands
        run: T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
      - name: Generate Dockerfile
        run: ./generate.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: Cache
        uses: actions/cache/restore@v4
        with:
          path: .cache/downloads
          key: download-cache-${{ steps.dl_cache.outputs.dltagname }}
          fail-on-cache-miss: true
      - name: Build target base image
        uses: docker/build-push-action@v6
        with:
          context: .
          pull: true
          push: true
          provenance: false
          tags: ${{ steps.imagename.outputs.name }}:latest
          cache-to: type=registry,mode=max,ref=${{ steps.imagename.outputs.name }}:cache
          cache-from: type=registry,ref=${{ steps.imagename.outputs.name }}:cache
      - name: Cleanup
        continue-on-error: true
        uses: BtbN/delete-untagged-ghcr-action@main
        with:
          token: ${{ github.token }}
          package_name: ${{ steps.imagename.outputs.rawname }}
          repository_owner: ${{ github.repository_owner }}
          repository: ${{ github.repository }}
          owner_type: user
          untagged_only: true
  build_ffmpeg:
    name: Build ffmpeg
    if: ${{ ( github.event.inputs.buildOnly == 'true' && !cancelled() ) || success() }}
    needs: build_targets
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win64,winarm64,linux64,linuxarm64]
        variant: [gpl,nonfree,gpl 5.1,gpl 6.1,gpl 7.1,nonfree 5.1,nonfree 6.1,nonfree 7.1,gpl-shared,nonfree-shared,gpl-shared 5.1,gpl-shared 6.1,gpl-shared 7.1,nonfree-shared 5.1,nonfree-shared 6.1,nonfree-shared 7.1]
    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}
      - name: Build ffmpeg
        run: |
          T="$(echo -n ${{ github.token }} | sha256sum | head -c 64)" && echo -e "::add-mask::${T}\n::stop-commands::${T}"
          ./build.sh ${{ matrix.target }} ${{ matrix.variant }}
      - name: Replace spaces in string
        id: strs
        run: |
          SLUG="${{ matrix.target }}-${{ matrix.variant }}"
          echo "artifact_slug=${SLUG// /-}" >> $GITHUB_OUTPUT
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ steps.strs.outputs.artifact_slug }}
          overwrite: true
          path: artifacts/*
          retention-days: 10
  publish_release:
    name: Publish release
    if: ${{ !cancelled() && ( github.event_name == 'schedule' || github.event.inputs.doRelease == 'true' ) && needs.build_ffmpeg.result == 'success' }}
    needs: build_ffmpeg
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ffmpeg-*
          merge-multiple: true
          path: artifacts
      - name: Create release
        id: create_release
        run: |
          set -xe
          shopt -s nullglob
          RELDATE="$(date +'%Y-%m-%d %H:%M')"
          NAME="Auto-Build $RELDATE"
          TAGNAME="autobuild-$(date +'%Y-%m-%d-%H-%M')"
          (cd artifacts && sha256sum *.{7z,tar.xz} > checksums.sha256)
          gh release create "$TAGNAME" --target "master" --title "$NAME" artifacts/*.{7z,tar.xz} artifacts/checksums.*
          echo "tag_name=${TAGNAME}" >> $GITHUB_OUTPUT
          echo "rel_date=${RELDATE}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Update Latest
        run: |
          set -xe
          shopt -s nullglob
          mkdir latest_artifacts
          ./util/repack_latest.sh latest_artifacts artifacts/*.{7z,tar.xz}
          (cd latest_artifacts && sha256sum *.{7z,tar.xz} > checksums.sha256)
          NAME="Latest Auto-Build (${{ steps.create_release.outputs.rel_date }})"
          TAGNAME="latest"
          gh release delete --cleanup-tag --yes "$TAGNAME" || true
          sleep 15
          gh release create "$TAGNAME" --target "master" --title "$NAME" latest_artifacts/*
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Prune old releases
        run: ./util/prunetags.sh
        env:
          GITHUB_TOKEN: ${{ github.token }}
